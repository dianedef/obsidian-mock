import type { Menu as IMenu, MenuItem, MenuPositionDef, Component } from 'obsidian';
export declare class Menu implements IMenu {
    items: MenuItem[];
    dom: HTMLElement;
    private hideCallback;
    private useNativeMenu;
    private children;
    private events;
    constructor();
    addItem(cb: (item: MenuItem) => any): this;
    addSeparator(): this;
    setNoIcon(): this;
    setUseNativeMenu(useNative: boolean): this;
    showAtMouseEvent(event: MouseEvent): this;
    showAtPosition(position: MenuPositionDef, doc?: Document): this;
    hide(): this;
    close(): this;
    onHide(callback: () => any): void;
    load(): void;
    onload(): void;
    unload(): void;
    onunload(): void;
    addChild<T extends Component>(component: T): T;
    removeChild<T extends Component>(component: T): T;
    register(_cb: () => any): void;
    registerEvent(_eventRef: any): void;
    registerDomEvent<K extends keyof WindowEventMap>(el: Window, type: K, callback: (this: HTMLElement, ev: WindowEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    registerDomEvent<K extends keyof DocumentEventMap>(el: Document, type: K, callback: (this: HTMLElement, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    registerDomEvent<K extends keyof HTMLElementEventMap>(el: HTMLElement, type: K, callback: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    registerInterval(id: number): number;
}
