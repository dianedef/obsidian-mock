import type { Editor as IEditor, MarkdownView } from 'obsidian';
export declare class EditorImpl implements IEditor {
    private content;
    private view;
    constructor(view: MarkdownView);
    getValue: import("vitest/dist").Mock<any, any>;
    setValue: import("vitest/dist").Mock<any, any>;
    getLine: import("vitest/dist").Mock<any, any>;
    setLine: import("vitest/dist").Mock<any, any>;
    lineCount: import("vitest/dist").Mock<any, any>;
    lastLine: import("vitest/dist").Mock<any, any>;
    getSelection: import("vitest/dist").Mock<any, any>;
    getRange: import("vitest/dist").Mock<any, any>;
    replaceRange: import("vitest/dist").Mock<any, any>;
    replaceSelection: import("vitest/dist").Mock<any, any>;
    getCursor: import("vitest/dist").Mock<any, any>;
    setCursor: import("vitest/dist").Mock<any, any>;
    setSelection: import("vitest/dist").Mock<any, any>;
    setSelections: import("vitest/dist").Mock<any, any>;
    focus: import("vitest/dist").Mock<any, any>;
    blur: import("vitest/dist").Mock<any, any>;
    hasFocus: import("vitest/dist").Mock<any, any>;
    getScrollInfo: import("vitest/dist").Mock<any, any>;
    scrollTo: import("vitest/dist").Mock<any, any>;
    scrollIntoView: import("vitest/dist").Mock<any, any>;
    undo: import("vitest/dist").Mock<any, any>;
    redo: import("vitest/dist").Mock<any, any>;
    exec: import("vitest/dist").Mock<any, any>;
    transaction: import("vitest/dist").Mock<any, any>;
    wordAt: import("vitest/dist").Mock<any, any>;
    posToOffset: import("vitest/dist").Mock<any, any>;
    offsetToPos: import("vitest/dist").Mock<any, any>;
    processLines: import("vitest/dist").Mock<any, any>;
    getDoc: import("vitest/dist").Mock<any, any>;
    somethingSelected: import("vitest/dist").Mock<any, any>;
    refresh: import("vitest/dist").Mock<any, any>;
    clearHistory: import("vitest/dist").Mock<any, any>;
    listSelections: import("vitest/dist").Mock<any, any>;
}
