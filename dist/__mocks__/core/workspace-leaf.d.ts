import { View as ObsidianView, WorkspaceItem } from 'obsidian';
import type { WorkspaceLeaf as IWorkspaceLeaf, ViewState, TFile, App, Scope, Component, EventRef, WorkspaceContainer, WorkspaceTabs, WorkspaceMobileDrawer, WorkspaceParent } from 'obsidian';
export declare const viewSpies: {
    onOpen: import("vitest/dist").Mock<any, any>;
    onClose: import("vitest/dist").Mock<any, any>;
    onload: import("vitest/dist").Mock<any, any>;
    onunload: import("vitest/dist").Mock<any, any>;
    setState: import("vitest/dist").Mock<any, any>;
    onResize: import("vitest/dist").Mock<any, any>;
};
export declare class MockView extends ObsidianView {
    navigation: boolean;
    icon: string;
    children: Component[];
    events: EventRef[];
    app: App;
    scope: Scope;
    constructor(leaf: IWorkspaceLeaf);
    onload: import("vitest/dist").Mock<any, any>;
    onunload: import("vitest/dist").Mock<any, any>;
    onResize: import("vitest/dist").Mock<any, any>;
    onPaneMenu: import("vitest/dist").Mock<any, any>;
    onHeaderMenu: import("vitest/dist").Mock<any, any>;
    getViewType: import("vitest/dist").Mock<any, any>;
    getDisplayText: import("vitest/dist").Mock<any, any>;
    getIcon: import("vitest/dist").Mock<any, any>;
    setState: import("vitest/dist").Mock<any, any>;
    getState: import("vitest/dist").Mock<any, any>;
    getEphemeralState: import("vitest/dist").Mock<any, any>;
    setViewData: import("vitest/dist").Mock<any, any>;
    clear: import("vitest/dist").Mock<any, any>;
    getScroll: import("vitest/dist").Mock<any, any>;
    applyScroll: import("vitest/dist").Mock<any, any>;
    load: import("vitest/dist").Mock<any, any>;
    unload: import("vitest/dist").Mock<any, any>;
    addChild: import("vitest/dist").Mock<any, any>;
    removeChild: import("vitest/dist").Mock<any, any>;
    register: import("vitest/dist").Mock<any, any>;
    registerEvent: import("vitest/dist").Mock<any, any>;
    registerDomEvent: import("vitest/dist").Mock<any, any>;
    registerInterval: import("vitest/dist").Mock<any, any>;
}
export declare const leafSpies: {
    open: import("vitest/dist").Mock<any, any>;
    detach: import("vitest/dist").Mock<any, any>;
    setViewState: import("vitest/dist").Mock<any, any>;
    openFile: import("vitest/dist").Mock<any, any>;
    setPinned: import("vitest/dist").Mock<any, any>;
    setGroup: import("vitest/dist").Mock<any, any>;
};
export declare class WorkspaceLeaf extends WorkspaceItem implements IWorkspaceLeaf {
    view: MockView;
    containerEl: HTMLElement;
    width: number;
    height: number;
    group: string;
    pinned: boolean;
    working: boolean;
    parent: WorkspaceTabs | WorkspaceMobileDrawer;
    constructor(parent: WorkspaceParent);
    on(name: 'pinned-change', callback: (pinned: boolean) => any, ctx?: any): EventRef;
    on(name: 'group-change', callback: (group: string) => any, ctx?: any): EventRef;
    setPinned(pinned: boolean): void;
    setGroup(group: string | null): void;
    getRoot(): WorkspaceContainer;
    getContainer(): WorkspaceContainer;
    openFile(file: TFile, openState?: ViewState): Promise<void>;
    open(view: MockView): Promise<MockView>;
    getViewState(): ViewState;
    setViewState(viewState: ViewState, eState?: any): Promise<void>;
    getEphemeralState(): any;
    setEphemeralState(state: any): void;
    togglePinned(): void;
    detach(): Promise<void>;
    setGroupMember(other: IWorkspaceLeaf): void;
    get isDeferred(): boolean;
    loadIfDeferred(): Promise<void>;
    getIcon(): string;
    getDisplayText(): string;
    onResize(): void;
}
