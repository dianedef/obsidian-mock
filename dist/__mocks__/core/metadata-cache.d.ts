import type { MetadataCache as IMetadataCache, CachedMetadata, TFile, LinkCache, ReferenceCache, HeadingCache, ListItemCache, EmbedCache, TagCache, FrontMatterCache, BlockCache, SectionCache } from 'obsidian';
export declare class MockMetadataCache implements IMetadataCache {
    private fileCache;
    resolvedLinks: Map<string, Record<string, number>>;
    unresolvedLinks: Map<string, Record<string, number>>;
    private tags;
    private links;
    private backlinks;
    private blockCache;
    on: import("vitest/dist").Mock<any, any>;
    off: import("vitest/dist").Mock<any, any>;
    offref: import("vitest/dist").Mock<any, any>;
    tryTrigger: import("vitest/dist").Mock<any, any>;
    getFirstLinkpathDest: import("vitest/dist").Mock<any, any>;
    setCacheForFile: import("vitest/dist").Mock<any, any>;
    deleteCacheForFile: import("vitest/dist").Mock<any, any>;
    getCache(path: string): CachedMetadata | null;
    getFileCache(file: TFile): CachedMetadata | null;
    fileToLinktext(file: TFile, sourcePath: string, omitMdExtension?: boolean): string;
    private getRelativePath;
    resolveLink(linktext: string, sourcePath: string): TFile | null;
    getLinkSuggestions(): string[];
    getTags(): Map<string, number>;
    getBacklinksForFile(file: TFile): Record<string, ReferenceCache[]>;
    getBacklinks: import("vitest/dist").Mock<any, any>;
    getLinks(): Map<string, LinkCache[]>;
    getResolvedLinks(): Map<string, Record<string, number>>;
    getBlockCache(): Map<string, BlockCache>;
    trigger: import("vitest/dist").Mock<any, any>;
    createFrontMatterCache(frontmatter: any): FrontMatterCache;
    createTitleCache(content: string): HeadingCache | null;
    createLinkCache(text: string, position: number): LinkCache;
    createTagCache(tag: string, position: number): TagCache;
    createEmbedCache(link: string, position: number): EmbedCache;
    createListItemCache(text: string, position: number): ListItemCache;
    createBlockCache(id: string, type: string, position: number): BlockCache;
    createSectionCache(position: number, type: string): SectionCache;
    createHeadingCache(heading: string, level: number, position: number): HeadingCache;
    getCachedFiles(): string[];
}
