import { App, Events } from 'obsidian';
import { Workspace } from '../../core/workspace';
import { Vault } from './vault';
import { MockMetadataCache } from './metadata-cache';
import { FileManager } from './file-manager';
import { Keymap } from './keymap';
import { Scope } from './scope';
import { Commands } from './commands';
export declare class MockApp extends Events implements App {
    workspace: Workspace;
    vault: Vault;
    metadataCache: MockMetadataCache;
    fileManager: FileManager;
    commands: Commands;
    keymap: Keymap;
    scope: Scope;
    plugins: Record<string, any>;
    lastEvent: MouseEvent | KeyboardEvent | null;
    constructor();
    loadProgress(): {
        setMessage: (message: string) => void;
        finish: () => void;
    };
    initializeLayout(): void;
    initializePlugins(): void;
    initializeCommands(): void;
    initializeKeymap(): void;
    initializeFileManager(): void;
    initializeMetadataCache(): void;
    initializeVault(): void;
    initializeWorkspace(): void;
    initializeScope(): void;
    initializeEvents(): void;
    initializeUI(): void;
    initializeSettings(): void;
    initializePluginSystem(): void;
    initializeThemeSystem(): void;
    initializeMarkdownPostProcessors(): void;
    initializeMarkdownRenderer(): void;
    initializeMarkdownPreviewRenderer(): void;
    initializeMarkdownSourceMode(): void;
    initializeMarkdownView(): void;
    initializeMarkdownState(): void;
    initializeMarkdownSettings(): void;
    initializeMarkdownCommands(): void;
    initializeMarkdownKeymap(): void;
    initializeMarkdownEvents(): void;
    initializeMarkdownUI(): void;
    initializeMarkdownPlugins(): void;
    initializeMarkdownThemes(): void;
}
export { MockApp as App };
export declare const app: MockApp;
