import { App, Events, FuzzyMatch, Instruction, Scope } from 'obsidian';
export declare abstract class FuzzySuggestModal<T> extends Events {
    app: App;
    scope: Scope;
    inputEl: HTMLInputElement;
    resultContainerEl: HTMLElement;
    items: T[];
    limit: number;
    emptyStateText: string;
    containerEl: HTMLElement;
    modalEl: HTMLElement;
    titleEl: HTMLElement;
    contentEl: HTMLElement;
    shouldRestoreSelection: boolean;
    private openCallback;
    private closeCallback;
    private instructions;
    private activeSuggestion;
    suggestions: T[];
    selectedItem: T | null;
    constructor(app: App);
    setTitle(title: string | DocumentFragment): this;
    setContent(content: string | DocumentFragment): this;
    setInstructions(instructions: Instruction[]): void;
    onNoSuggestion(): void;
    selectActiveSuggestion(evt: MouseEvent | KeyboardEvent): void;
    setItems(items: T[]): void;
    getItems(): T[];
    getSuggestions(query: string): FuzzyMatch<T>[];
    private findMatches;
    private calculateScore;
    abstract getItemText(item: T): string;
    abstract onChooseItem(item: T, evt: MouseEvent | KeyboardEvent): void;
    selectSuggestion(value: FuzzyMatch<T>, evt: MouseEvent | KeyboardEvent): void;
    onChooseSuggestion(item: FuzzyMatch<T>, evt: MouseEvent | KeyboardEvent): void;
    renderSuggestion(value: FuzzyMatch<T>, el: HTMLElement): void;
    open(): void;
    close(): void;
    onOpen(): void;
    onClose(): void;
    private updateSuggestions;
    setPlaceholder(placeholder: string): void;
    addInstruction(instruction: Instruction): void;
}
